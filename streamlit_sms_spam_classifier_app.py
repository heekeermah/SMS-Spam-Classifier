# -*- coding: utf-8 -*-
"""Streamlit SMS Spam Classifier App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QkZM9kbTp-DFYvwc-BSxi33QQTUO-KvN
"""

# app.py
import streamlit as st
import joblib
import re # For regular expressions, if needed for preprocessing

# --- Configuration ---
# Define the paths to your saved model and vectorizer
MODEL_PATH = "spam_classifier.pkl"
VECTORIZER_PATH = "vectorizer.pkl"

# --- Load Model and Vectorizer ---
@st.cache_resource # Cache the loading of the model and vectorizer
def load_classifier_and_vectorizer():
    """
    Loads the trained spam classifier and TF-IDF vectorizer.
    Uses st.cache_resource to avoid reloading on every rerun.
    """
    try:
        model = joblib.load(MODEL_PATH)
        vectorizer = joblib.load(VECTORIZER_PATH)
        return model, vectorizer
    except FileNotFoundError:
        st.error(f"Error: Could not find '{MODEL_PATH}' or '{VECTORIZER_PATH}'. "
                 "Please ensure these files are in the same directory as app.py.")
        st.stop() # Stop the app if files are not found
    except Exception as e:
        st.error(f"An error occurred while loading the model or vectorizer: {e}")
        st.stop()

model, vectorizer = load_classifier_and_vectorizer()

# --- Text Preprocessing Function ---
def preprocess_text(text):
    """
    Applies the same preprocessing steps to the input text as used during model training.
    Ensure these steps are IDENTICAL to those in your SMS_Spam_classification.ipynb.
    Example steps: lowercasing, removing punctuation.
    """
    if not isinstance(text, str):
        return "" # Handle non-string input gracefully

    text = text.lower() # Convert to lowercase
    text = re.sub(r'[^\w\s]', '', text) # Remove punctuation (adjust regex if needed)
    # Add any other preprocessing steps here (e.g., stop word removal, stemming/lemmatization)
    # For instance, if you removed stop words, you'd add a loop or use NLTK here.
    return text

# --- Streamlit UI ---
st.set_page_config(page_title="SMS Spam Classifier", page_icon="ðŸ“©")

st.markdown("""
    <style>
    .main {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 10px 20px;
        border: none;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #45a049;
        transform: translateY(-2px);
    }
    .stTextArea label {
        font-size: 1.1em;
        font-weight: bold;
        color: #333;
    }
    .stSuccess {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
        border-radius: 8px;
        padding: 10px;
    }
    .stError {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 8px;
        padding: 10px;
    }
    .stWarning {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
        border-radius: 8px;
        padding: 10px;
    }
    </style>
""", unsafe_allow_html=True)

st.title("ðŸ“© SMS Spam Classifier")
st.markdown("Enter an SMS message below to classify it as 'Spam' or 'Not Spam'.")

# User input
user_input = st.text_area("Enter the SMS message:", height=150,
                          placeholder="Type your message here...")

# Predict button
if st.button("Classify"):
    if not user_input or user_input.strip() == "":
        st.warning("Please enter a message to classify.")
    else:
        # 1. Preprocess the user input
        processed_input = preprocess_text(user_input)

        # 2. Transform the processed input using the loaded vectorizer
        # The vectorizer expects an iterable (e.g., a list) of texts.
        try:
            input_vector = vectorizer.transform([processed_input])
        except Exception as e:
            st.error(f"Error during text transformation: {e}. "
                     "Ensure your vectorizer is loaded correctly and matches training data expectations.")
            st.stop()

        # 3. Make prediction
        try:
            prediction = model.predict(input_vector)
            # You might want to get probabilities too:
            # prediction_proba = model.predict_proba(input_vector)
            # spam_prob = prediction_proba[0][model.classes_.tolist().index('spam')]
        except Exception as e:
            st.error(f"Error during prediction: {e}. "
                     "Ensure your model is loaded correctly and matches vectorizer output expectations.")
            st.stop()

        # 4. Display result
        if prediction[0] == "spam":
            st.error("ðŸš« This message is SPAM!")
            # st.write(f"Confidence (Spam): {spam_prob:.2f}") # Optional: show probability
        else:
            st.success("âœ… This message is NOT SPAM.")
            # st.write(f"Confidence (Not Spam): {1 - spam_prob:.2f}") # Optional: show probability

st.markdown("---")
st.markdown("Developed with Streamlit and Machine Learning for SMS classification.")